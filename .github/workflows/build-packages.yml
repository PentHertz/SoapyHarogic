name: Build SoapyHarogic Multi-Architecture Packages

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: soapyharogic
  MAINTAINER: "SÃ©bastien Dudek <maintainer@penthertz.com>"
  DESCRIPTION: "SoapySDR plugin for Harogic HTRA series spectrum analysis devices"
  HOMEPAGE: "https://github.com/PentHertz/SoapyHarogic"

jobs:
  build:
    name: Build ${{ matrix.arch }} package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU for cross-compilation
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version from tag or commit
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +%Y%m%d)-$(echo $GITHUB_SHA | cut -c1-8)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Create build directory
      run: mkdir -p build-output

    - name: Build in Docker container
      run: |
        docker run --rm --platform=${{ matrix.platform }} \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e PACKAGE_NAME="${{ env.PACKAGE_NAME }}" \
          -e VERSION="${{ steps.version.outputs.VERSION }}" \
          -e ARCH="${{ matrix.arch }}" \
          -e MAINTAINER="${{ env.MAINTAINER }}" \
          -e DESCRIPTION="${{ env.DESCRIPTION }}" \
          -e HOMEPAGE="${{ env.HOMEPAGE }}" \
          ubuntu:22.04 \
          bash -c '
            set -e
            
            # Update package list and install dependencies
            apt-get update
            apt-get install -y build-essential cmake pkg-config git wget curl libsoapysdr-dev soapysdr-tools dpkg-dev debhelper fakeroot lintian unzip

            # Create directories for build
            mkdir -p /workspace/build /workspace/debian-package/DEBIAN /workspace/debian-package/usr/local/lib/SoapySDR/modules0.8 /workspace/debian-package/usr/share/doc/$PACKAGE_NAME

            # Download and install Harogic HTRA API SDK
            echo "Downloading Harogic HTRA SDK..."
            cd /tmp
            wget https://github.com/PentHertz/rfswift_harogic_install/releases/download/0.55.61/Install_HTRA_SDK.zip
            unzip Install_HTRA_SDK.zip
            cd Install_HTRA_SDK
            chmod +x install_htraapi_lib.sh
            ./install_htraapi_lib.sh
            
            # Build the project
            cd /workspace/build
            
            ARCH_NAME=""
            case "$ARCH" in
                "amd64") ARCH_NAME="x86_64" ;;
                "arm64") ARCH_NAME="aarch64" ;;
            esac
            
            echo "Building for architecture: $ARCH ($ARCH_NAME)"
            
            HTRA_LIB_PATH="/opt/htraapi/lib/${ARCH_NAME}"
            HTRA_INCLUDE_PATH="/opt/htraapi/inc"
            
            if [ ! -f "${HTRA_LIB_PATH}/libhtraapi.so" ]; then
                echo "Creating missing symlink for libhtraapi.so..."
                ln -sf libhtraapi.so.* "${HTRA_LIB_PATH}/libhtraapi.so"
            fi
            
            git config --global --add safe.directory /workspace || true
            
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX=/usr/local \
                  -DHTRA_ROOT="/opt/htraapi" \
                  -DLibHTRA_INCLUDE_DIR="${HTRA_INCLUDE_PATH}" \
                  -DLibHTRA_LIBRARY="${HTRA_LIB_PATH}/libhtraapi.so" \
                  /workspace
            
            make -j$(nproc)
            DESTDIR=/workspace/debian-package make install
            
            # Copy the architecture-specific HTRA library and dependencies to the package
            echo "Including HTRA library for ${ARCH_NAME} in package..."
            mkdir -p /workspace/debian-package/usr/local/lib
            cp "${HTRA_LIB_PATH}/libhtraapi.so.0.55.61" /workspace/debian-package/usr/local/lib/
            ln -sf libhtraapi.so.0.55.61 /workspace/debian-package/usr/local/lib/libhtraapi.so.0
            ln -sf libhtraapi.so.0 /workspace/debian-package/usr/local/lib/libhtraapi.so
            
            # Copy udev rules
            mkdir -p /workspace/debian-package/etc/udev/rules.d
            cp /opt/htraapi/configs/htra-cyusb.rules /workspace/debian-package/etc/udev/rules.d/
            
            # Create debian control file
            cat > /workspace/debian-package/DEBIAN/control <<EOF
Package: $PACKAGE_NAME
Version: $VERSION
Section: electronics
Priority: optional
Architecture: $ARCH
Depends: libsoapysdr0.8, libc6, libstdc++6, libgcc-s1, libusb-1.0-0
Maintainer: $MAINTAINER
Description: $DESCRIPTION
 This package provides a SoapySDR plugin to use Harogic HTRA series devices.
 .
 This package includes the architecture-specific Harogic HTRA API library
 for $ARCH systems, so no separate SDK installation is required.
Homepage: $HOMEPAGE
EOF
            
            # Create postinst script (using quoted "EOF" to prevent shell expansion)
            cat > /workspace/debian-package/DEBIAN/postinst << "EOF"
#!/bin/bash
set -e
# Update library cache
ldconfig
# Refresh SoapySDR module cache
if command -v SoapySDRUtil >/dev/null 2>&1; then
    echo "Refreshing SoapySDR module cache..."
    SoapySDRUtil --info >/dev/null 2>&1 || true
fi
# Create CalFile directory if it does not exist
if [ ! -d "/usr/bin/CalFile" ]; then
    echo "Creating calibration file directory at /usr/bin/CalFile"
    mkdir -p /usr/bin/CalFile
    echo "Note: Place your Harogic calibration files in /usr/bin/CalFile"
fi
exit 0
EOF
            
            # Make postinst script executable
            chmod 755 /workspace/debian-package/DEBIAN/postinst
            
            # Fix all file and directory permissions
            find /workspace/debian-package -type d -exec chmod 755 {} \;
            find /workspace/debian-package -type f -exec chmod 644 {} \;
            chmod 755 /workspace/debian-package/DEBIAN/postinst
            
            # Build the .deb package
            cd /workspace
            fakeroot dpkg-deb --build debian-package build-output/${PACKAGE_NAME}_${VERSION}_${ARCH}.deb
            
            # Verify and check the package
            lintian build-output/${PACKAGE_NAME}_${VERSION}_${ARCH}.deb || echo "Lintian warnings are non-fatal"
            
            echo "Build completed successfully for $ARCH"
          '

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
        path: build-output/
        retention-days: 7
        if-no-files-found: warn

    - name: Upload to release (if tag)
      if: success() && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: build-output/*.deb
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}