name: Build SoapyHarogic Multi-Architecture Packages

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: soapyharogic
  MAINTAINER: "SÃ©bastien Dudek <maintainer@penthertz.com>"
  DESCRIPTION: "SoapySDR plugin for Harogic HTRA series spectrum analysis devices"
  HOMEPAGE: "https://github.com/PentHertz/SoapyHarogic"

jobs:
  build:
    name: Build ${{ matrix.arch }} package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU for cross-compilation
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version from tag or commit
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +%Y%m%d)-$(echo $GITHUB_SHA | cut -c1-8)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Create build directory
      run: mkdir -p build-output

    - name: Create build-and-package script
      run: |
        cat > build-and-package.sh << 'BUILD_SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        handle_error() {
            echo "Build failed at step: $1"
            exit 1
        }
        
        exec > >(tee "/workspace/build-output/build-ARCH_PLACEHOLDER.log") 2>&1
        echo "Starting build for ARCH_PLACEHOLDER at $(date)"
        
        echo "--- 1. Installing dependencies ---"
        apt-get update || handle_error "apt-get update"
        apt-get install -y build-essential cmake pkg-config git wget curl libsoapysdr-dev soapysdr-tools dpkg-dev debhelper fakeroot lintian unzip || handle_error "dependency installation"

        echo "--- 2. Creating package structure ---"
        mkdir -p /workspace/build /workspace/debian-package/DEBIAN /workspace/debian-package/usr/local/lib/SoapySDR/modules0.8 /workspace/debian-package/usr/share/doc/PACKAGE_NAME_PLACEHOLDER

        echo "--- 3. Downloading and installing Harogic HTRA SDK ---"
        cd /tmp
        wget https://github.com/PentHertz/rfswift_harogic_install/releases/download/0.55.61/Install_HTRA_SDK.zip || handle_error "SDK download"
        unzip Install_HTRA_SDK.zip || handle_error "SDK extraction"
        cd Install_HTRA_SDK
        mkdir -p /etc/udev/rules.d
        chmod +x install_htraapi_lib.sh
        ./install_htraapi_lib.sh || handle_error "SDK installation"
        if [ ! -d "/opt/htraapi" ]; then handle_error "HTRA API installation verification"; fi

        echo "--- 4. Building SoapyHarogic ---"
        cd /workspace/build
        
        ARCH_NAME=""
        case "ARCH_PLACEHOLDER" in
            "amd64") ARCH_NAME="x86_64" ;;
            "arm64") ARCH_NAME="aarch64" ;;
        esac
        if [ -z "$ARCH_NAME" ]; then handle_error "Unsupported architecture: ARCH_PLACEHOLDER"; fi

        HTRA_LIB_PATH="/opt/htraapi/lib/${ARCH_NAME}"
        HTRA_INCLUDE_PATH="/opt/htraapi/inc"
        
        # Hide other architectures to force CMake to use the correct one
        for other_arch in x86_64 aarch64 armv7 aarch64_gcc7.5 x86_64_gcc5.4; do
            if [ "$other_arch" != "$ARCH_NAME" ] && [ -d "/opt/htraapi/lib/$other_arch" ]; then
                mv "/opt/htraapi/lib/$other_arch" "/opt/htraapi/lib/${other_arch}.hidden"
            fi
        done
        
        if [ ! -f "${HTRA_LIB_PATH}/libhtraapi.so" ]; then 
            ln -sf libhtraapi.so.* "${HTRA_LIB_PATH}/libhtraapi.so"
        fi
        git config --global --add safe.directory /workspace
        
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr/local \
              -DHTRA_ROOT="/opt/htraapi" \
              -DLibHTRA_INCLUDE_DIR="${HTRA_INCLUDE_PATH}" \
              -DLibHTRA_LIBRARY="${HTRA_LIB_PATH}/libhtraapi.so" \
              /workspace || handle_error "CMake configuration"
        make -j$(nproc) || handle_error "compilation"
        DESTDIR=/workspace/debian-package make install || handle_error "installation"
        
        # Restore hidden architectures
        for other_arch in x86_64 aarch64 armv7 aarch64_gcc7.5 x86_64_gcc5.4; do
            if [ "$other_arch" != "$ARCH_NAME" ] && [ -d "/opt/htraapi/lib/${other_arch}.hidden" ]; then
                mv "/opt/htraapi/lib/${other_arch}.hidden" "/opt/htraapi/lib/$other_arch"
            fi
        done

        echo "--- 5. Bundling libraries and configuration ---"
        mkdir -p /workspace/debian-package/usr/local/lib
        cp "${HTRA_LIB_PATH}/libhtraapi.so.0.55.61" /workspace/debian-package/usr/local/lib/
        ln -sf libhtraapi.so.0.55.61 /workspace/debian-package/usr/local/lib/libhtraapi.so.0
        ln -sf libhtraapi.so.0 /workspace/debian-package/usr/local/lib/libhtraapi.so
        
        # Copy additional dependencies
        for lib in libliquid.so libusb-1.0.so.0.2.0 libgomp.so.1.0.0; do
            if [ -f "${HTRA_LIB_PATH}/${lib}" ]; then
                cp "${HTRA_LIB_PATH}/${lib}" /workspace/debian-package/usr/local/lib/
            fi
        done
        
        mkdir -p /workspace/debian-package/etc/udev/rules.d
        if [ -f "/opt/htraapi/configs/htra-cyusb.rules" ]; then
            cp /opt/htraapi/configs/htra-cyusb.rules /workspace/debian-package/etc/udev/rules.d/
        fi

        echo "--- 6. Creating Debian package metadata ---"
        cat > /workspace/debian-package/DEBIAN/control << 'CONTROL_EOF'
Package: PACKAGE_NAME_PLACEHOLDER
Version: VERSION_PLACEHOLDER
Architecture: ARCH_PLACEHOLDER
Maintainer: MAINTAINER_PLACEHOLDER
Homepage: HOMEPAGE_PLACEHOLDER
Section: electronics
Priority: optional
Depends: libsoapysdr0.8, libc6, libstdc++6, libgcc-s1, libusb-1.0-0
Description: DESCRIPTION_PLACEHOLDER
 This package includes the required Harogic HTRA API library and SoapySDR
 plugin for using Harogic devices with software like GQRX, CubicSDR, etc.
CONTROL_EOF

        cat > /workspace/debian-package/DEBIAN/postinst << 'POSTINST_EOF'
#!/bin/bash
set -e
ldconfig
if command -v SoapySDRUtil >/dev/null 2>&1; then 
    SoapySDRUtil --info >/dev/null 2>&1 || true
fi
if [ ! -d "/usr/bin/CalFile" ]; then 
    mkdir -p /usr/bin/CalFile
    echo "NOTE: Place your Harogic calibration files in /usr/bin/CalFile"
fi
exit 0
POSTINST_EOF
        chmod 755 /workspace/debian-package/DEBIAN/postinst

        echo "--- 7. Building the final package ---"
        find /workspace/debian-package -type f -exec chmod 644 {} \;
        find /workspace/debian-package -type d -exec chmod 755 {} \;
        chmod 755 /workspace/debian-package/DEBIAN/postinst
        
        PACKAGE_FILENAME="PACKAGE_NAME_PLACEHOLDER_VERSION_PLACEHOLDER_ARCH_PLACEHOLDER.deb"
        fakeroot dpkg-deb --build debian-package "/workspace/build-output/${PACKAGE_FILENAME}" || handle_error "dpkg-deb build"
        lintian "/workspace/build-output/${PACKAGE_FILENAME}" || echo "Lintian finished with warnings (non-fatal)."
        echo "Build completed successfully for ARCH_PLACEHOLDER"
        BUILD_SCRIPT_EOF
        
        # Replace placeholders with actual values
        sed -i "s/ARCH_PLACEHOLDER/${{ matrix.arch }}/g" build-and-package.sh
        sed -i "s/VERSION_PLACEHOLDER/${{ steps.version.outputs.VERSION }}/g" build-and-package.sh
        sed -i "s/PACKAGE_NAME_PLACEHOLDER/${{ env.PACKAGE_NAME }}/g" build-and-package.sh
        
        # Use environment variables for complex replacements
        export MAINTAINER_VALUE="${{ env.MAINTAINER }}"
        export HOMEPAGE_VALUE="${{ env.HOMEPAGE }}"
        export DESCRIPTION_VALUE="${{ env.DESCRIPTION }}"
        
        sed -i "s|MAINTAINER_PLACEHOLDER|${MAINTAINER_VALUE}|g" build-and-package.sh
        sed -i "s|HOMEPAGE_PLACEHOLDER|${HOMEPAGE_VALUE}|g" build-and-package.sh
        sed -i "s|DESCRIPTION_PLACEHOLDER|${DESCRIPTION_VALUE}|g" build-and-package.sh
        
        chmod +x build-and-package.sh

    - name: Build package in Docker container
      run: |
        docker run --rm --platform=${{ matrix.platform }} \
          -v ${{ github.workspace }}:/workspace \
          ubuntu:22.04 \
          /workspace/build-and-package.sh

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: soapyharogic-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
        path: |
          build-output/*.deb
          build-output/*.log
        retention-days: 7
        if-no-files-found: warn

    - name: Upload to release (if tag)
      if: success() && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: build-output/*.deb
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Architecture | Status | Package |" >> $GITHUB_STEP_SUMMARY
        echo "|--------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        SUCCESS_ARCHS=""
        for dir in artifacts/*/; do
          if [ ! -d "$dir" ]; then continue; fi

          arch=""
          if [[ "$dir" == *"-amd64"* ]]; then arch="amd64"; fi
          if [[ "$dir" == *"-arm64"* ]]; then arch="arm64"; fi
          
          if [ -n "$arch" ]; then
            SUCCESS_ARCHS="$SUCCESS_ARCHS $arch"
            package_file=$(find "$dir" -name "*.deb" -print -quit)
            if [ -n "$package_file" ]; then
              package_name=$(basename "$package_file")
              echo "| ${arch} | â Success | \`${package_name}\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| ${arch} | â Failed | .deb file not found in artifact |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

        for arch in amd64 arm64; do
            if ! [[ "$SUCCESS_ARCHS" == *"$arch"* ]]; then
                echo "| ${arch} | â Failed | Build artifact not found |" >> $GITHUB_STEP_SUMMARY
            fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation Instructions" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Download the appropriate package for your architecture" >> $GITHUB_STEP_SUMMARY
        echo "sudo dpkg -i soapyharogic_*_amd64.deb   # For x86_64 systems" >> $GITHUB_STEP_SUMMARY
        echo "sudo dpkg -i soapyharogic_*_arm64.deb   # For ARM64 systems" >> $GITHUB_STEP_SUMMARY
        echo "sudo apt-get install -f                 # Install dependencies if needed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY