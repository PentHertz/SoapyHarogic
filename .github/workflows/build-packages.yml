name: Build SoapyHarogic Multi-Architecture Packages

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  # Package information
  PACKAGE_NAME: soapyharogic
  MAINTAINER: "Sébastien Dudek <maintainer@penthertz.com>"
  DESCRIPTION: "SoapySDR plugin for Harogic HTRA series spectrum analysis devices"
  HOMEPAGE: "https://github.com/PentHertz/SoapyHarogic"

jobs:
  build:
    name: Build ${{ matrix.arch }} package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU for cross-compilation
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version from tag or commit
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +%Y%m%d)-$(echo $GITHUB_SHA | cut -c1-8)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Create build directory
      run: mkdir -p build-output

    - name: Create build-and-package script
      run: |
        # Note: We use 'BUILD_SCRIPT_EOF' without quotes to allow shell expansion of ${{...}} variables
        cat > build-and-package.sh << BUILD_SCRIPT_EOF
        #!/bin/bash
        set -e
        
        # Error handling function
        handle_error() {
            echo "Build failed at step: \$1"
            exit 1
        }
        
        # Redirect all output to a log file in the shared volume
        exec > >(tee "/workspace/build-output/build-${{ matrix.arch }}.log") 2>&1
        echo "Starting build for ${{ matrix.arch }} at \$(date)"
        
        # 1. Install dependencies
        echo "--- Installing dependencies ---"
        apt-get update || handle_error "apt-get update"
        apt-get install -y build-essential cmake pkg-config git wget curl libsoapysdr-dev soapysdr-tools dpkg-dev debhelper fakeroot lintian unzip || handle_error "dependency installation"

        # 2. Create package structure
        echo "--- Creating package directory structure ---"
        mkdir -p /workspace/build
        mkdir -p /workspace/debian-package/DEBIAN
        mkdir -p /workspace/debian-package/usr/local/lib/SoapySDR/modules0.8
        mkdir -p /workspace/debian-package/usr/share/doc/${{ env.PACKAGE_NAME }}

        # 3. Download and install Harogic SDK
        echo "--- Downloading and installing Harogic HTRA SDK ---"
        cd /tmp
        wget https://github.com/PentHertz/rfswift_harogic_install/releases/download/0.55.61/Install_HTRA_SDK.zip || handle_error "SDK download"
        unzip Install_HTRA_SDK.zip || handle_error "SDK extraction"
        cd Install_HTRA_SDK
        chmod +x install_htraapi_lib.sh
        ./install_htraapi_lib.sh || handle_error "SDK installation"
        if [ ! -d "/opt/htraapi" ]; then handle_error "HTRA API installation verification failed"; fi
        echo "HTRA SDK installed successfully."

        # 4. Configure and build the project
        echo "--- Building SoapyHarogic ---"
        cd /workspace/build
        
        ARCH_NAME=""
        case "${{ matrix.arch }}" in
            "amd64") ARCH_NAME="x86_64" ;;
            "arm64") ARCH_NAME="aarch64" ;;
        esac
        if [ -z "\$ARCH_NAME" ]; then handle_error "Unsupported architecture: ${{ matrix.arch }}"; fi

        HTRA_LIB_PATH="/opt/htraapi/lib/\${ARCH_NAME}"
        HTRA_INCLUDE_PATH="/opt/htraapi/inc"

        if [ ! -f "\${HTRA_LIB_PATH}/libhtraapi.so" ]; then
            echo "Creating missing symlink for libhtraapi.so"
            ln -sf libhtraapi.so.* "\${HTRA_LIB_PATH}/libhtraapi.so"
        fi

        git config --global --add safe.directory /workspace
        
        echo "Running CMake for \${ARCH_NAME}..."
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr/local \
              -DHTRA_ROOT="/opt/htraapi" \
              -DLibHTRA_INCLUDE_DIR="\${HTRA_INCLUDE_PATH}" \
              -DLibHTRA_LIBRARY="\${HTRA_LIB_PATH}/libhtraapi.so" \
              /workspace || handle_error "CMake configuration"
              
        echo "Running make..."
        make -j\$(nproc) || handle_error "compilation"
        
        echo "Installing to staging directory..."
        DESTDIR=/workspace/debian-package make install || handle_error "installation"

        # 5. Bundle required libraries and configuration
        echo "--- Bundling required libraries and configuration ---"
        if [ -f "\${HTRA_LIB_PATH}/libhtraapi.so.0.55.61" ]; then
            echo "Copying HTRA libraries for \${ARCH_NAME}..."
            mkdir -p /workspace/debian-package/usr/local/lib
            cp "\${HTRA_LIB_PATH}/libhtraapi.so.0.55.61" /workspace/debian-package/usr/local/lib/
            ln -sf libhtraapi.so.0.55.61 /workspace/debian-package/usr/local/lib/libhtraapi.so.0
            ln -sf libhtraapi.so.0 /workspace/debian-package/usr/local/lib/libhtraapi.so
        else
            handle_error "Could not find main HTRA library to bundle"
        fi
        
        mkdir -p /workspace/debian-package/etc/udev/rules.d
        cp /opt/htraapi/configs/htra-cyusb.rules /workspace/debian-package/etc/udev/rules.d/

        # 6. Create Debian package metadata
        echo "--- Creating Debian package metadata ---"
        
        cat > /workspace/debian-package/DEBIAN/control << CONTROL_EOF
Package: ${{ env.PACKAGE_NAME }}
Version: ${{ steps.version.outputs.VERSION }}
Architecture: ${{ matrix.arch }}
Maintainer: ${{ env.MAINTAINER }}
Homepage: ${{ env.HOMEPAGE }}
Section: electronics
Priority: optional
Depends: libsoapysdr0.8, libc6, libstdc++6, libgcc-s1, libusb-1.0-0
Description: ${{ env.DESCRIPTION }}
 This package includes the required Harogic HTRA API library and SoapySDR
 plugin for using Harogic devices with software like GQRX, CubicSDR, etc.
CONTROL_EOF

        cat > /workspace/debian-package/DEBIAN/postinst << "POSTINST_EOF"
#!/bin/bash
set -e
ldconfig
if command -v SoapySDRUtil >/dev/null 2>&1; then
    echo "Refreshing SoapySDR module cache..."
    SoapySDRUtil --info >/dev/null 2>&1 || true
fi
if [ ! -d "/usr/bin/CalFile" ]; then
    mkdir -p /usr/bin/CalFile
    echo "NOTE: Place your Harogic calibration files in /usr/bin/CalFile"
fi
echo "SoapyHarogic installation complete."
exit 0
POSTINST_EOF

        cat > /workspace/debian-package/DEBIAN/prerm << "PRERM_EOF"
#!/bin/bash
set -e
exit 0
PRERM_EOF
        
        chmod 755 /workspace/debian-package/DEBIAN/postinst
        chmod 755 /workspace/debian-package/DEBIAN/prerm

        # 7. Build the final package
        echo "--- Building .deb package ---"
        PACKAGE_FILENAME="${{ env.PACKAGE_NAME }}_${{ steps.version.outputs.VERSION }}_${{ matrix.arch }}.deb"
        fakeroot dpkg-deb --build debian-package "/workspace/build-output/\${PACKAGE_FILENAME}" || handle_error "dpkg-deb build"
        
        echo "--- Verifying package ---"
        lintian "/workspace/build-output/\${PACKAGE_FILENAME}" || echo "Lintian finished with warnings (non-fatal)."
        
        echo "Build completed successfully for ${{ matrix.arch }}"
        BUILD_SCRIPT_EOF
        
        chmod +x build-and-package.sh

    - name: Build package in Docker container
      run: |
        docker run --rm --platform=${{ matrix.platform }} \
          -v ${{ github.workspace }}:/workspace \
          ubuntu:22.04 \
          /workspace/build-and-package.sh

    - name: Upload build artifacts
      if: success() || failure() # Always upload artifacts for debugging
      uses: actions/upload-artifact@v4
      with:
        name: soapyharogic-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
        path: |
          build-output/*.deb
          build-output/*.log
        retention-days: 7
        if-no-files-found: warn

    - name: Upload to release (if tag)
      if: success() && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: build-output/*.deb
        draft: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Architecture | Status | Package |" >> $GITHUB_STEP_SUMMARY
        echo "|--------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        for arch in amd64 arm64; do
          artifact_dir=$(find artifacts -type d -name "soapyharogic-*-${arch}" | head -n 1)
          if [ -d "\$artifact_dir" ]; then
            package_file=\$(find "\$artifact_dir" -name "*.deb" | head -n 1)
            if [ -n "\$package_file" ]; then
              package_name=\$(basename "\$package_file")
              echo "| \${arch} | ✅ Success | \`\${package_name}\` |" >> \$GITHUB_STEP_SUMMARY
            else
              echo "| \${arch} | ❌ Failed | Package not found in artifact |" >> \$GITHUB_STEP_SUMMARY
            fi
          else
            echo "| \${arch} | ❌ Failed | Build failed or artifact not found |" >> \$GITHUB_STEP_SUMMARY
          fi
        done